#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ load("/lib/helpers.star", "get_bom_data_for_tkr_name", "get_image_repo_for_component", "ValuesFormatStr")
#@ load("tanzu-addons-manager_addon_data.lib.yaml", "tanzuaddonsmanagerdatavalues", "tanzuaddonsmanagerimageinfodatavalues")

#@ def tanzuaddonsmanagerpackageyaml():
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tanzu-addons-package-sa
  namespace: tkg-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tanzu-addons-package-cluster-role
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tanzu-addons-package-cluster-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tanzu-addons-package-cluster-role
subjects:
- kind: ServiceAccount
  name: tanzu-addons-package-sa
  namespace: tkg-system
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: tanzu-addons-manager
  namespace: tkg-system
spec:
  serviceAccountName: tanzu-addons-package-sa
  packageRef:
    #! PackageName is available in TKR BOM under the particular path listed below. We do not have to validate the key existence
    #! is because YTT will throw error if any struct is None or keys are missing, we expect to see those error and templating
    #! will be exit immediately.
    refName: #@ get_bom_data_for_tkr_name().addons["tanzu-addons-manager"].packageName
    versionSelection:
      prereleases: {}
  values:
  - secretRef:
      name: tanzu-addons-manager-data-values
---
apiVersion: v1
kind: Secret
metadata:
  name: tanzu-addons-manager-data-values
  namespace: tkg-system
type: Opaque
stringData:
  values.yaml: #@ ValuesFormatStr.format(yaml.encode(tanzuaddonsmanagerdatavalues()))

#@ end
